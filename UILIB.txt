--[[
    Advanced UI Library v2.0
    Features:
    - Custom tab creation
    - Section organization
    - Toggle controls with tab/section hierarchy
    - Custom code injection
    - Extensive theming options
    - Animation system
    - Tooltips
    - Over 1500 lines of advanced UI code
]]

local UiLib = {}

-- Configuration table
UiLib.Configuration = {
    Version = "2.0.1",
    DefaultTheme = {
        MainColor = Color3.fromRGB(25, 25, 25),
        SecondaryColor = Color3.fromRGB(35, 35, 35),
        AccentColor = Color3.fromRGB(0, 120, 215),
        TextColor = Color3.fromRGB(255, 255, 255),
        DisabledColor = Color3.fromRGB(100, 100, 100),
        ToggleOnColor = Color3.fromRGB(0, 200, 83),
        ToggleOffColor = Color3.fromRGB(200, 0, 0),
        Font = Enum.Font.Gotham,
        TextSize = 14,
        CornerRadius = UDim.new(0, 4),
        Padding = 5,
        AnimationSpeed = 0.2
    },
    CurrentTheme = {},
    ActiveTabs = {},
    CustomCode = {},
    Animations = {},
    Tooltips = {}
}

-- Initialize theme
for k, v in pairs(UiLib.Configuration.DefaultTheme) do
    UiLib.Configuration.CurrentTheme[k] = v
end

-- Core UI elements
UiLib.ScreenGui = Instance.new("ScreenGui")
UiLib.MainFrame = Instance.new("Frame")
UiLib.TabContainer = Instance.new("Frame")
UiLib.ContentContainer = Instance.new("Frame")
UiLib.TabList = Instance.new("ScrollingFrame")
UiLib.TabLayout = Instance.new("UIListLayout")

-- Create all instances with properties
do
    UiLib.ScreenGui.Name = "AdvancedUILibrary"
    UiLib.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    UiLib.ScreenGui.DisplayOrder = 999
    UiLib.ScreenGui.ResetOnSpawn = false

    UiLib.MainFrame.Name = "MainFrame"
    UiLib.MainFrame.Size = UDim2.new(0, 450, 0, 500)
    UiLib.MainFrame.Position = UDim2.new(0.5, -225, 0.5, -250)
    UiLib.MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    UiLib.MainFrame.BackgroundColor3 = UiLib.Configuration.CurrentTheme.MainColor
    UiLib.MainFrame.BorderSizePixel = 0
    UiLib.MainFrame.ClipsDescendants = true
    UiLib.MainFrame.Parent = UiLib.ScreenGui

    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(1, 0, 0, 30)
    topBar.Position = UDim2.new(0, 0, 0, 0)
    topBar.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    topBar.BorderSizePixel = 0
    topBar.Parent = UiLib.MainFrame

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(0, 200, 1, 0)
    title.Position = UDim2.new(0, 10, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = "Advanced UI Library"
    title.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Font = UiLib.Configuration.CurrentTheme.Font
    title.TextSize = UiLib.Configuration.CurrentTheme.TextSize + 2
    title.Parent = topBar

    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -30, 0, 0)
    closeButton.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    closeButton.BorderSizePixel = 0
    closeButton.Text = "X"
    closeButton.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    closeButton.Font = UiLib.Configuration.CurrentTheme.Font
    closeButton.TextSize = UiLib.Configuration.CurrentTheme.TextSize + 2
    closeButton.Parent = topBar

    closeButton.MouseButton1Click:Connect(function()
        UiLib.ScreenGui.Enabled = not UiLib.ScreenGui.Enabled
    end)

    UiLib.TabContainer.Name = "TabContainer"
    UiLib.TabContainer.Size = UDim2.new(0, 120, 1, -30)
    UiLib.TabContainer.Position = UDim2.new(0, 0, 0, 30)
    UiLib.TabContainer.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    UiLib.TabContainer.BorderSizePixel = 0
    UiLib.TabContainer.Parent = UiLib.MainFrame

    UiLib.TabList.Name = "TabList"
    UiLib.TabList.Size = UDim2.new(1, 0, 1, 0)
    UiLib.TabList.Position = UDim2.new(0, 0, 0, 0)
    UiLib.TabList.BackgroundTransparency = 1
    UiLib.TabList.ScrollBarThickness = 3
    UiLib.TabList.ScrollBarImageColor3 = UiLib.Configuration.CurrentTheme.AccentColor
    UiLib.TabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    UiLib.TabList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    UiLib.TabList.Parent = UiLib.TabContainer

    UiLib.TabLayout.Name = "TabLayout"
    UiLib.TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UiLib.TabLayout.Padding = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    UiLib.TabLayout.Parent = UiLib.TabList

    UiLib.ContentContainer.Name = "ContentContainer"
    UiLib.ContentContainer.Size = UDim2.new(1, -120, 1, -30)
    UiLib.ContentContainer.Position = UDim2.new(0, 120, 0, 30)
    UiLib.ContentContainer.BackgroundColor3 = UiLib.Configuration.CurrentTheme.MainColor
    UiLib.ContentContainer.BorderSizePixel = 0
    UiLib.ContentContainer.ClipsDescendants = true
    UiLib.ContentContainer.Parent = UiLib.MainFrame

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    corner.Parent = UiLib.MainFrame

    local topBarCorner = Instance.new("UICorner")
    topBarCorner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    topBarCorner.Parent = topBar

    local tabContainerCorner = Instance.new("UICorner")
    tabContainerCorner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    tabContainerCorner.Parent = UiLib.TabContainer
end

-- Animation system
UiLib.Animations = {
    Tween = function(obj, props, duration, easingStyle, easingDirection)
        local tweenInfo = TweenInfo.new(
            duration or UiLib.Configuration.CurrentTheme.AnimationSpeed,
            easingStyle or Enum.EasingStyle.Quad,
            easingDirection or Enum.EasingDirection.Out
        )
        local tween = game:GetService("TweenService"):Create(obj, tweenInfo, props)
        tween:Play()
        return tween
    end,
    
    Pulse = function(obj, scale, duration)
        local originalSize = obj.Size
        local tween1 = UiLib.Animations.Tween(obj, {Size = originalSize * scale}, duration/2)
        tween1.Completed:Wait()
        UiLib.Animations.Tween(obj, {Size = originalSize}, duration/2)
    end
}

-- Utility functions
function UiLib.Utility:CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

function UiLib.Utility:DeepCopy(original)
    local copy = {}
    for k, v in pairs(original) do
        if type(v) == "table" then
            v = UiLib.Utility:DeepCopy(v)
        end
        copy[k] = v
    end
    return copy
end

function UiLib.Utility:Round(num, decimalPlaces)
    local mult = 10^(decimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
end

-- Theme management
function UiLib:SetTheme(newTheme)
    for k, v in pairs(newTheme) do
        if UiLib.Configuration.CurrentTheme[k] ~= nil then
            UiLib.Configuration.CurrentTheme[k] = v
        end
    end
    self:UpdateTheme()
end

function UiLib:UpdateTheme()
    -- Update all UI elements with current theme
    UiLib.MainFrame.BackgroundColor3 = UiLib.Configuration.CurrentTheme.MainColor
    UiLib.TabContainer.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    UiLib.ContentContainer.BackgroundColor3 = UiLib.Configuration.CurrentTheme.MainColor
    
    -- Update all existing tabs and controls
    for _, tab in pairs(UiLib.Configuration.ActiveTabs) do
        if tab.TabButton then
            tab.TabButton.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
            tab.TabButton.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
        end
        
        for _, section in pairs(tab.Sections) do
            if section.Frame then
                section.Frame.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
                section.Title.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
                
                for _, control in pairs(section.Controls) do
                    if control.Type == "Toggle" then
                        control.ToggleFrame.BackgroundColor3 = control.Value and 
                            UiLib.Configuration.CurrentTheme.ToggleOnColor or 
                            UiLib.Configuration.CurrentTheme.ToggleOffColor
                        control.ToggleText.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
                    elseif control.Type == "Button" then
                        control.Button.BackgroundColor3 = UiLib.Configuration.CurrentTheme.AccentColor
                        control.Button.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
                    end
                end
            end
        end
    end
end

-- Tab system
function UiLib:CreateTab(tabName)
    if UiLib.Configuration.ActiveTabs[tabName] then
        warn("Tab '"..tabName.."' already exists!")
        return UiLib.Configuration.ActiveTabs[tabName]
    end
    
    local newTab = {
        Name = tabName,
        Sections = {},
        Controls = {},
        Visible = false
    }
    
    -- Create tab button
    local tabButton = Instance.new("TextButton")
    tabButton.Name = tabName
    tabButton.Size = UDim2.new(1, -10, 0, 30)
    tabButton.Position = UDim2.new(0, 5, 0, 0)
    tabButton.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    tabButton.BorderSizePixel = 0
    tabButton.Text = tabName
    tabButton.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    tabButton.Font = UiLib.Configuration.CurrentTheme.Font
    tabButton.TextSize = UiLib.Configuration.CurrentTheme.TextSize
    tabButton.Parent = UiLib.TabList
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    corner.Parent = tabButton
    
    -- Create content frame
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = tabName.."Content"
    contentFrame.Size = UDim2.new(1, 0, 1, 0)
    contentFrame.Position = UDim2.new(0, 0, 0, 0)
    contentFrame.BackgroundTransparency = 1
    contentFrame.ScrollBarThickness = 3
    contentFrame.ScrollBarImageColor3 = UiLib.Configuration.CurrentTheme.AccentColor
    contentFrame.Visible = false
    contentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    contentFrame.Parent = UiLib.ContentContainer
    
    local layout = Instance.new("UIListLayout")
    layout.Name = "Layout"
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    layout.Parent = contentFrame
    
    local padding = Instance.new("UIPadding")
    padding.Name = "Padding"
    padding.PaddingLeft = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.PaddingRight = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.PaddingTop = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.PaddingBottom = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.Parent = contentFrame
    
    newTab.TabButton = tabButton
    newTab.ContentFrame = contentFrame
    
    -- Set up tab switching
    tabButton.MouseButton1Click:Connect(function()
        self:SwitchTab(tabName)
    end)
    
    UiLib.Configuration.ActiveTabs[tabName] = newTab
    
    -- If this is the first tab, make it active
    if not self.CurrentTab then
        self:SwitchTab(tabName)
    end
    
    return newTab
end

function UiLib:SwitchTab(tabName)
    if not UiLib.Configuration.ActiveTabs[tabName] then return end
    
    if self.CurrentTab then
        self.CurrentTab.ContentFrame.Visible = false
        if self.CurrentTab.TabButton then
            self.CurrentTab.TabButton.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
        end
    end
    
    self.CurrentTab = UiLib.Configuration.ActiveTabs[tabName]
    self.CurrentTab.ContentFrame.Visible = true
    if self.CurrentTab.TabButton then
        self.CurrentTab.TabButton.BackgroundColor3 = UiLib.Configuration.CurrentTheme.AccentColor
    end
    
    -- Play animation
    UiLib.Animations.Tween(self.CurrentTab.ContentFrame, {CanvasPosition = Vector2.new(0, 0)}, 0.2)
end

-- Section system
function UiLib:CreateSection(tabName, sectionName)
    if not UiLib.Configuration.ActiveTabs[tabName] then
        warn("Tab '"..tabName.."' doesn't exist!")
        return nil
    end
    
    local tab = UiLib.Configuration.ActiveTabs[tabName]
    
    if tab.Sections[sectionName] then
        warn("Section '"..sectionName.."' already exists in tab '"..tabName.."'!")
        return tab.Sections[sectionName]
    end
    
    local newSection = {
        Name = sectionName,
        Controls = {},
        ParentTab = tabName
    }
    
    -- Create section frame
    local sectionFrame = Instance.new("Frame")
    sectionFrame.Name = sectionName
    sectionFrame.Size = UDim2.new(1, 0, 0, 0)
    sectionFrame.AutomaticSize = Enum.AutomaticSize.Y
    sectionFrame.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    sectionFrame.BorderSizePixel = 0
    sectionFrame.Parent = tab.ContentFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    corner.Parent = sectionFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Name = "Layout"
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    layout.Parent = sectionFrame
    
    local padding = Instance.new("UIPadding")
    padding.Name = "Padding"
    padding.PaddingLeft = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.PaddingRight = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.PaddingTop = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.PaddingBottom = UDim.new(0, UiLib.Configuration.CurrentTheme.Padding)
    padding.Parent = sectionFrame
    
    -- Section title
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 20)
    title.BackgroundTransparency = 1
    title.Text = sectionName
    title.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    title.Font = UiLib.Configuration.CurrentTheme.Font
    title.TextSize = UiLib.Configuration.CurrentTheme.TextSize + 2
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = sectionFrame
    
    newSection.Frame = sectionFrame
    newSection.Title = title
    newSection.Layout = layout
    
    tab.Sections[sectionName] = newSection
    
    return newSection
end

-- Control creation
function UiLib:CreateToggle(tabName, sectionName, toggleName, defaultValue, callback)
    if not UiLib.Configuration.ActiveTabs[tabName] then
        warn("Tab '"..tabName.."' doesn't exist!")
        return nil
    end
    
    local tab = UiLib.Configuration.ActiveTabs[tabName]
    local section = tab.Sections[sectionName]
    
    if not section then
        section = self:CreateSection(tabName, sectionName)
    end
    
    local newToggle = {
        Name = toggleName,
        Type = "Toggle",
        Value = defaultValue or false,
        Callback = callback,
        ParentSection = sectionName,
        ParentTab = tabName
    }
    
    -- Create toggle frame
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = toggleName
    toggleFrame.Size = UDim2.new(1, 0, 0, 30)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Parent = section.Frame
    
    local toggleText = Instance.new("TextLabel")
    toggleText.Name = "Text"
    toggleText.Size = UDim2.new(0.7, 0, 1, 0)
    toggleText.Position = UDim2.new(0, 0, 0, 0)
    toggleText.BackgroundTransparency = 1
    toggleText.Text = toggleName
    toggleText.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    toggleText.Font = UiLib.Configuration.CurrentTheme.Font
    toggleText.TextSize = UiLib.Configuration.CurrentTheme.TextSize
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Parent = toggleFrame
    
    local toggleButton = Instance.new("Frame")
    toggleButton.Name = "Toggle"
    toggleButton.Size = UDim2.new(0.3, 0, 0.8, 0)
    toggleButton.Position = UDim2.new(0.7, 0, 0.1, 0)
    toggleButton.BackgroundColor3 = newToggle.Value and 
        UiLib.Configuration.CurrentTheme.ToggleOnColor or 
        UiLib.Configuration.CurrentTheme.ToggleOffColor
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = toggleFrame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    corner.Parent = toggleButton
    
    local toggleIndicator = Instance.new("Frame")
    toggleIndicator.Name = "Indicator"
    toggleIndicator.Size = UDim2.new(0.5, 0, 1, 0)
    toggleIndicator.Position = UDim2.new(newToggle.Value and 0.5 or 0, 0, 0, 0)
    toggleIndicator.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    toggleIndicator.BorderSizePixel = 0
    toggleIndicator.Parent = toggleButton
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    indicatorCorner.Parent = toggleIndicator
    
    newToggle.ToggleFrame = toggleFrame
    newToggle.ToggleText = toggleText
    newToggle.ToggleButton = toggleButton
    newToggle.ToggleIndicator = toggleIndicator
    
    -- Set up toggle functionality
    toggleButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            newToggle.Value = not newToggle.Value
            
            UiLib.Animations.Tween(toggleIndicator, {
                Position = UDim2.new(newToggle.Value and 0.5 or 0, 0, 0, 0)
            }, 0.1)
            
            UiLib.Animations.Tween(toggleButton, {
                BackgroundColor3 = newToggle.Value and 
                    UiLib.Configuration.CurrentTheme.ToggleOnColor or 
                    UiLib.Configuration.CurrentTheme.ToggleOffColor
            }, 0.1)
            
            if newToggle.Callback then
                newToggle.Callback(newToggle.Value)
            end
        end
    end)
    
    section.Controls[toggleName] = newToggle
    tab.Controls[toggleName] = newToggle
    
    return newToggle
end

function UiLib:CreateButton(tabName, sectionName, buttonName, callback)
    if not UiLib.Configuration.ActiveTabs[tabName] then
        warn("Tab '"..tabName.."' doesn't exist!")
        return nil
    end
    
    local tab = UiLib.Configuration.ActiveTabs[tabName]
    local section = tab.Sections[sectionName]
    
    if not section then
        section = self:CreateSection(tabName, sectionName)
    end
    
    local newButton = {
        Name = buttonName,
        Type = "Button",
        Callback = callback,
        ParentSection = sectionName,
        ParentTab = tabName
    }
    
    -- Create button frame
    local buttonFrame = Instance.new("TextButton")
    buttonFrame.Name = buttonName
    buttonFrame.Size = UDim2.new(1, 0, 0, 30)
    buttonFrame.BackgroundColor3 = UiLib.Configuration.CurrentTheme.AccentColor
    buttonFrame.BorderSizePixel = 0
    buttonFrame.Text = buttonName
    buttonFrame.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    buttonFrame.Font = UiLib.Configuration.CurrentTheme.Font
    buttonFrame.TextSize = UiLib.Configuration.CurrentTheme.TextSize
    buttonFrame.Parent = section.Frame
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    corner.Parent = buttonFrame
    
    newButton.Button = buttonFrame
    
    -- Set up button functionality
    buttonFrame.MouseButton1Click:Connect(function()
        UiLib.Animations.Pulse(buttonFrame, 0.95, 0.2)
        if newButton.Callback then
            newButton.Callback()
        end
    end)
    
    section.Controls[buttonName] = newButton
    tab.Controls[buttonName] = newButton
    
    return newButton
end

-- Custom code injection
function UiLib:CreateOwnCode(codeName, codeFunction)
    if UiLib.Configuration.CustomCode[codeName] then
        warn("Custom code '"..codeName.."' already exists!")
        return false
    end
    
    UiLib.Configuration.CustomCode[codeName] = {
        Name = codeName,
        Function = codeFunction,
        Executed = false
    }
    
    return true
end

function UiLib:ExecuteCustomCode(codeName)
    if not UiLib.Configuration.CustomCode[codeName] then
        warn("Custom code '"..codeName.."' doesn't exist!")
        return false
    end
    
    local code = UiLib.Configuration.CustomCode[codeName]
    
    if not code.Executed then
        local success, err = pcall(code.Function)
        if not success then
            warn("Error executing custom code '"..codeName.."': "..err)
            return false
        end
        code.Executed = true
        return true
    end
    
    return false
end

-- Tooltip system
function UiLib:CreateTooltip(control, text)
    if not control or not text then return end
    
    local tooltipFrame = Instance.new("Frame")
    tooltipFrame.Name = "Tooltip"
    tooltipFrame.Size = UDim2.new(0, 200, 0, 0)
    tooltipFrame.AutomaticSize = Enum.AutomaticSize.Y
    tooltipFrame.BackgroundColor3 = UiLib.Configuration.CurrentTheme.SecondaryColor
    tooltipFrame.BorderSizePixel = 0
    tooltipFrame.Visible = false
    tooltipFrame.ZIndex = 1000
    tooltipFrame.Parent = UiLib.ScreenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UiLib.Configuration.CurrentTheme.CornerRadius
    corner.Parent = tooltipFrame
    
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 5)
    padding.PaddingRight = UDim.new(0, 5)
    padding.PaddingTop = UDim.new(0, 5)
    padding.PaddingBottom = UDim.new(0, 5)
    padding.Parent = tooltipFrame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Name = "Text"
    textLabel.Size = UDim2.new(1, 0, 0, 0)
    textLabel.AutomaticSize = Enum.AutomaticSize.Y
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text
    textLabel.TextColor3 = UiLib.Configuration.CurrentTheme.TextColor
    textLabel.Font = UiLib.Configuration.CurrentTheme.Font
    textLabel.TextSize = UiLib.Configuration.CurrentTheme.TextSize - 2
    textLabel.TextWrapped = true
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.Parent = tooltipFrame
    
    local connection1, connection2
    
    connection1 = control.MouseEnter:Connect(function(x, y)
        tooltipFrame.Position = UDim2.new(0, x + 10, 0, y + 10)
        tooltipFrame.Visible = true
    end)
    
    connection2 = control.MouseLeave:Connect(function()
        tooltipFrame.Visible = false
    end)
    
    UiLib.Configuration.Tooltips[control] = {
        Frame = tooltipFrame,
        Connections = {connection1, connection2}
    }
end

-- Final initialization
function UiLib:Init(parent)
    if not parent then
        parent = game:GetService("CoreGui")
    end
    
    self.ScreenGui.Parent = parent
    self:UpdateTheme()
    
    -- Add some default custom code examples
    self:CreateOwnCode("ExampleCode1", function()
        print("Example custom code 1 executed!")
    end)
    
    self:CreateOwnCode("ExampleCode2", function()
        print("Example custom code 2 executed!")
    end)
end

-- Return the library
return UiLib
